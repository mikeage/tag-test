# yamllint disable rule:line-length
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
---
name: Builds

on:  # yamllint disable-line rule:truthy
  pull_request: {}
  push:
    branches:
      - "**"
    tags:
      - "v*"

env:
  UNITY_VERSION: "2021.3.16f1"
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
  # If UNITY_SERIAL is not set, then use a hardcoded license. Otherwise, don't set this, so the game-ci actions will use EMAIL/PASS/SERIAL
  UNITY_LICENSE: ${{ fromJSON('["<?xml version=\"1.0\" encoding=\"UTF-8\"?><root>\n    <License id=\"Terms\">\n        <MachineBindings>\n            <Binding Key=\"1\" Value=\"576562626572264761624c65526f7578\"/>\n            <Binding Key=\"2\" Value=\"576562626572264761624c65526f7578\"/>\n        </MachineBindings>\n        <MachineID Value=\"D7nTUnjNAmtsUMcnoyrqkgIbYdM=\"/>\n        <SerialHash Value=\"56bce8b03146a1a47339b2bc8a7a40af276146b9\"/>\n        <Features>\n            <Feature Value=\"33\"/>\n            <Feature Value=\"1\"/>\n            <Feature Value=\"12\"/>\n            <Feature Value=\"2\"/>\n            <Feature Value=\"24\"/>\n            <Feature Value=\"3\"/>\n            <Feature Value=\"36\"/>\n            <Feature Value=\"17\"/>\n            <Feature Value=\"19\"/>\n            <Feature Value=\"62\"/>\n        </Features>\n        <DeveloperData Value=\"AQAAAEY0LURFWjQtVVk1TS04M1lULTNOWVAtNEtXNg==\"/>\n        <SerialMasked Value=\"F4-DEZ4-UY5M-83YT-3NYP-XXXX\"/>\n        <StartDate Value=\"2021-01-27T00:00:00\"/>\n        <UpdateDate Value=\"2021-05-06T05:54:38\"/>\n        <InitialActivationDate Value=\"2021-01-27T07:00:51\"/>\n        <LicenseVersion Value=\"6.x\"/>\n        <ClientProvidedVersion Value=\"2019.4.25f1\"/>\n        <AlwaysOnline Value=\"false\"/>\n        <Entitlements>\n            <Entitlement Ns=\"unity_editor\" Tag=\"UnityPersonal\" Type=\"EDITOR\" ValidTo=\"9999-12-31T00:00:00\"/>\n            <Entitlement Ns=\"unity_editor\" Tag=\"DarkSkin\" Type=\"EDITOR_FEATURE\" ValidTo=\"9999-12-31T00:00:00\"/>\n        </Entitlements>\n    </License>\n<Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\"><SignedInfo><CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\"/><SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/><Reference URI=\"#Terms\"><Transforms><Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/></Transforms><DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/><DigestValue>xCBKYap0JQVBqX22jba4k5Da5t0=</DigestValue></Reference></SignedInfo><SignatureValue>n8eYH6Exi6mpw6onE5blxgQY1bAb+NLrsblMlFLUTPVTGw5KmugyVHedyZiI47D3nZVK/FpGaVxJ\n2xcNBr8yR1lfQrakloAZhvlCTiNi/O8N+6aHGZgyi/5+2SLqj0E/ZB+bVlTaSioLy/cF6iOt0d0T\nvW+VEdhht9iWrKKeNBakcXGccX5tQhJFaTR8aYevp0t0TMz3cfGPhs5qDivufqoFl34Y6qa8HjAC\n+OvrlD0TIgMyev+czK0KMIRsT/euOoyOHupXb93BuiMWceRIqf4mYvPKJbhx15Zy3uxHbsF6lV8q\nGah5JCb8iGRTDmG2JzMg6pXCjiznPFNk4Tkl7Q==</SignatureValue></Signature></root>", null]')[secrets.UNITY_SERIAL != null] }}

jobs:
  configuration:
    if: |
      (github.event_name == 'pull_request') ||
      (
        github.event_name == 'push' &&
        (
        github.ref == 'refs/heads/main' ||
        contains(github.ref, 'refs/tags/v') ||
        contains(github.event.head_commit.message, '[CI BUILD]')
        )
      )
    name: Configure Build Parameters
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version}}
      stamp: ${{ steps.version.outputs.stamp }}
      prerelease: ${{ steps.version.outputs.prerelease }}
      previousrelease: ${{ steps.rawchangelogdata.outputs.previousrelease }}
      currentrelease: ${{ steps.rawchangelogdata.outputs.currentrelease }}
      rawchangelog: ${{ steps.rawchangelogdata.outputs.rawchangelog}}
      basename: ${{ steps.github.outputs.basename }}
      description: ${{ steps.github.outputs.description}}
      itchchannelname: ${{ steps.version.outputs.itchchannelname }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true  # We don't use LFS, but it adds no time, and leave it here in case we do at some point later

      - name: Calculate version and stamp
        id: version
        run: |
          # General note: for pull requests, we query github.event.pull_request.head.sha rather than the default sha, which is a merge commit of the target branch into the head. For pushes or tag commits, there's no additional commits made by the CI, so we can use the default, current, reference

          # Get the first two numbers from the last tag, including a tag on the current commit (to handle the case of a formal build)
          MAJOR_MINOR=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*" ${{ github.event.pull_request.head.sha }})

          # How many commits have been made since the last tag of the form vX.Y.
          #
          # We used to use this version, however, it couldn't handle these two cases at the same time:
          #                    (v2.1)
          #                       |
          #             /-c2..c4..c5-\
          #            /              \
          #   c...c0..c1....c3.........m6..c7....c10.c11.....m13...c14 <- [main]
          #       ^                         \               /
          #    (v2.0)                        \-c8..c9..c12-/
          # If we use --first-parent, it wouldn't find a tag that was not a first parent, and so it'll think we're now in 2.0.8, though it skips the commits on the branches. If we did not use --first-parent, it gets the proper tag (v2.1), but counts each commit in the feature branch, and gives 2.1.10. While we almost always squash, if we ever do have an explicit merge commit, we don't want to count the commits on the feature branch. In this case, we actually want to get 2.1.7 (commits c3, m6, c7, c10, c11, m13, and c14).
          ######## OLD CODE ########
          # # If the value is not equal to zero, git describe will give us a version in the form vX.Y-Z-gAAAAAAA, where Z is the count. If the current commit has a vX.Y tag, it'll just return that, so the 'cut' does nothing. We test for this below
          # PATCH_VERSION=$(git describe --tags --match "v[0-9]*.[0-9]*" --first-parent ${{ github.event.pull_request.head.sha }} | cut -d'-' -f2)
          ######## END OLD CODE ########

          # Instead, we'll find the last tag, wherever it is, and then count the --first-parent commits "since" then (i.e., not included; they might be historically behind it)
          CLOSEST_TAG=$(git describe --tags --match "v[0-9]*.[0-9]*" --abbrev=0 HEAD)
          PATCH_VERSION=$(git log ${CLOSEST_TAG}.. --oneline --first-parent | wc -l)

          if [ $PATCH_VERSION == "0" ]
          then
            STAMP=""
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "itchchannelname=release" >> $GITHUB_OUTPUT

          else
            # This is the first 7 characters of the commit; we do it this way rather than via rev-parse to avoid an 'if' conditional depending on whether it's a PR or push. (unlike git describe, git rev-parse doesn't default to the current HEAD)
            STAMP=$(git describe --tags --match "v[0-9]*.[0-9]*" ${{ github.event.pull_request.head.sha }} | cut -d'-' -f3)
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "itchchannelname=beta" >> $GITHUB_OUTPUT
          fi
          VERSION=$(echo "$MAJOR_MINOR.$PATCH_VERSION" | sed -e 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "stamp=$STAMP" >> $GITHUB_OUTPUT
          echo "Version $VERSION stamp=$STAMP"
      - name: Calculate Release tags for Changelog and raw changelog
        id: rawchangelogdata
        env:
          PRERELEASE: ${{ steps.version.outputs.prerelease }}
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          if [ "$PRERELEASE" == "true" ]
          then
            PREV=$(git describe --tags --abbrev=0 HEAD^)
          else
            PREV=$(git describe --tags --match "v[0-9]*.[0-9]*" --abbrev=0 HEAD^)
          fi
          CUR="$(git rev-parse HEAD)"
          echo "previousrelease=$PREV" >> $GITHUB_OUTPUT
          echo "currentrelease=$CUR" >> $GITHUB_OUTPUT
          LAST_TAG=$(git describe --tags --match 'v[0-9]*.[0-9]*' --abbrev=0 HEAD^)
          RAW_CHANGELOG=$(echo "$(git log --first-parent ${LAST_TAG}.. --pretty=format:'%D-g%h: %s' | sed -e 's/tag: //' -e 's/HEAD -> main, //')" | sed -e "s/origin\/main/$VERSION/" | tac)
          echo "rawchangelog=${RAW_CHANGELOG//$'\n'/'\n'}" >> $GITHUB_OUTPUT

      - name: Echo Changelog (for debugging purposes)
        env:
          CHANGELOG: ${{ steps.rawchangelogdata.outputs.rawchangelog}}
        run: |
          echo "CHANGELOG=$CHANGELOG"

      - name: Set custom app name and package name, if relevant
        id: github
        env:
          PRERELEASE: ${{ steps.version.outputs.prerelease }}
        run: |
          # For a PR action (i.e., syncronize / open), the value of github.ref will be refs/pull/1234/merge
          # For a push action, it will be either refs/heads/foo_branch_name OR refs/tags/v1234.
          # We want to use the base name for pushes of tags or to main, the PR number for PRs, and the branch name for named branches.
          if [[ "$PRERELEASE" == "false" || ${{ github.ref }} == refs/heads/main ]]
          then
            echo "basename=OpenBrush" >> $GITHUB_OUTPUT
            echo "description=" >> $GITHUB_OUTPUT
          else
            if [[ ${{ github.ref }} == refs/pull/* ]]
            then
              DESCRIPTION="PR#$(echo ${{ github.ref }} | sed -e 's#refs/pull/##' -e 's#/merge##')"
            elif [[ ${{ github.ref }} == refs/heads/* ]]
            then
              DESCRIPTION="$(echo ${{ github.ref }} | sed -e 's#refs/heads/##')"
            else
              DESCRIPTION="Unknown"
            fi
            echo "description=-btb-description ${DESCRIPTION}" >> $GITHUB_OUTPUT
            IDENTIFIER=$(echo ${DESCRIPTION} | sed -e 's/[\/#_-]//g')
            echo "basename=OpenBrush-${IDENTIFIER}" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build
    needs: configuration
    runs-on: ubuntu-latest
    steps:
      - name: Print Everything
        id: version
        env:
          BASENAME: ${{ needs.configuration.outputs.basename}}
          CHANGELOG: ${{ steps.changelog.outputs.changelog }}
          ITCH_SUBCHANNEL_NAME: ${{ needs.configuration.outputs.itchchannelname }}
          OPEN_BRUSH_EXECUTABLE: ${{ needs.configuration.outputs.basename}}.exe
          PACKAGE: releases/OpenBrush_Desktop_${{ needs.configuration.outputs.version }}
          PRERELEASE: ${{ needs.configuration.outputs.prerelease }}
          RAW_CHANGELOG: ${{ needs.configuration.outputs.rawchangelog }}
          VERSION: ${{ needs.configuration.outputs.version }}
          customParameters: -btb-target ${{ matrix.targetPlatform }} -btb-display ${{ matrix.vrsdk }} -btb-out /github/workspace/build/${{ matrix.targetPlatform }}-${{ matrix.vrsdk }}/${{ env.filename }} ${{ needs.configuration.outputs.description}} ${{ env.stamp }} ${{ matrix.extraoptions }}
          fromTag: "${{ needs.configuration.outputs.previousrelease }}"
          tag_name: ${{ needs.configuration.outputs.version }}
          toTag: "${{ needs.configuration.outputs.currentrelease }}"
        run: |
          echo "BASENAME=${BASENAME}"
          echo "CHANGELOG=${CHANGELOG}"
          echo "ITCH_SUBCHANNEL_NAME=${ITCH_SUBCHANNEL_NAME}"
          echo "OPEN_BRUSH_EXECUTABLE=${OPEN_BRUSH_EXECUTABLE}"
          echo "PACKAGE=${PACKAGE}"
          echo "PRERELEASE=${PRERELEASE}"
          echo "RAW_CHANGELOG=${RAW_CHANGELOG}"
          echo "VERSION=${VERSION}"
          echo "customParameters=${customParameters}"
          echo "fromTag=${fromTag}"
          echo "tag_name=${tag_name}"
          echo "toTag=${toTag}"
  release:
    name: Create Github Release
    needs: [configuration, build]
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/v'))

    steps:
      - name: "Build Changelog"
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v3.6.0
        with:
          fromTag: "${{ needs.configuration.outputs.previousrelease }}"
          toTag: "${{ needs.configuration.outputs.currentrelease }}"
          configurationJson: |
            {
              "categories": [
                {
                    "title": "## 🚀 Features",
                    "labels": ["feature", "enhancement"]
                },
                {
                    "title": "## 🐛 Fixes",
                    "labels": ["fix", "bugfix"]
                },
                {
                    "title": "## 🛠️ Infrastructure",
                    "labels": ["infrastructure"]
                },
                {
                    "title": "## 📦 Dependencies / Maintenance",
                    "labels": ["dependencies", "maintenance"]
                },
                {
                    "title": "## 💬 Uncategorized",
                    "labels": []
                }
              ]
              ,
              "pr_template": "- #{{TITLE}} (PR ##{{NUMBER}} by #{{AUTHOR}})"
            }

      - name: Echo Changelog (for debugging purposes)
        env:
          CHANGELOG: ${{ steps.changelog.outputs.changelog }}
        run: echo "$CHANGELOG"

      - name: Package Artifacts for release
        env:
          VERSION: ${{ needs.configuration.outputs.version }}
        run: |
          mkdir releases
          cd releases
          touch OpenBrush_Desktop_$VERSION.exe
          zip OpenBrush_Desktop_$VERSION.zip *.exe
          rm *.exe

      - name: Publish
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ needs.configuration.outputs.prerelease }}
          target_commitish: ${{ needs.configuration.outputs.currentrelease }}
          tag_name: ${{ needs.configuration.outputs.version }}
          files: releases/*


